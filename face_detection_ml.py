# -*- coding: utf-8 -*-
"""Face Detection ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gxW5noC8q1iBogIH7I-MCBT5-s0U0tmv
"""

import cv2
import matplotlib.pyplot as plt

image = cv2.imread('/content/people1.jpg')
display (image.shape)

plt.imshow(image)
plt.show()

print(image)

from google.colab.patches import cv2_imshow

cv2_imshow(image)
cv2.waitKey(0)

image = cv2.resize(image, (800, 600))

image.shape

cv2_imshow(image)
cv2.waitKey(0)

image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
cv2_imshow(image_gray)
cv2.waitKey(0)

display (image_gray.shape)

face_detector = cv2.CascadeClassifier('/content/haarcascade_frontalface_default.xml')
face_detector

detections = face_detector.detectMultiScale(image_gray)
display (detections)

display (len(detections))

x=390  # X - Co ordinates
y=323  # Y- Co ordinates
w=56   # Face Width
h=56   # Face Height
# Draw the rectangle with co-ordinate specified above
# (0,255,255) - This is RBG colour for rectangle
# 1 is the thickness of rectangle
cv2.rectangle(image_gray, (x, y), (x + w, y + h), (0,255,255), 1)
cv2_imshow(image_gray)
cv2.waitKey(0)

x=115  # X - Co ordinates
y=124  # Y- Co ordinates
w=52   # Face Width
h=52   # Face Height
# Thickness is 5 , more thicker rectangle
cv2.rectangle(image_gray, (x, y), (x + w, y + h), (0,255,255), 5)
cv2_imshow( image_gray)
cv2.waitKey(0)

x=475  # X - Co ordinates
y=123  # Y- Co ordinates
w=59   # Face Width
h=59  # Face Height
cv2.rectangle(image_gray, (x, y), (x + w, y + h), (0,255,255), 5)
cv2_imshow( image_gray)
cv2.waitKey(0)

for (x, y, w, h) in detections:
  #print (x, y, w, h)
  cv2.rectangle(image_gray, (x, y), (x + w, y + h), (0,255,255), 5)
cv2_imshow( image_gray)
cv2.waitKey(0)
plt.show()

image = cv2.imread('/content/people2.jpg')
display (image.shape)
image = cv2.resize(image, (800, 600)) # Resize image
display (image.shape)
detections = face_detector.detectMultiScale(image)
display (detections)

for (x, y, w, h) in detections:
  #print (x, y, w, h)
  cv2.rectangle(image, (x, y), (x + w, y + h), (0,255,255), 5)
cv2_imshow(image)
cv2.waitKey(0)
plt.show()

image = cv2.imread('/content/people2.jpg')
image = cv2.resize(image, (800, 600)) # Resize image
image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
detections = face_detector.detectMultiScale(image_gray, scaleFactor = 1.09)
display (detections)
for (x, y, w, h) in detections:
    cv2.rectangle(image, (x, y), (x + w, y + h), (0,255,0), 5)
cv2_imshow(image)
cv2.waitKey(0)
plt.show()

image = cv2.imread('/content/people2.jpg')
cv2_imshow(image)
cv2.waitKey(0)
plt.show()

image = cv2.imread('/content/people2.jpg')
image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
detections = face_detector.detectMultiScale(image_gray, scaleFactor = 1.09)
display (detections)
for (x, y, w, h) in detections:
    print(w, h)
    cv2.rectangle(image, (x, y), (x + w, y + h), (0,255,0), 2)
cv2_imshow(image)
cv2.waitKey(0)
plt.show()

image = cv2.imread('/content/people2.jpg')

image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
detections = face_detector.detectMultiScale(image_gray, scaleFactor = 1.2,minNeighbors=7)
display (detections)
for (x, y, w, h) in detections:
    print(w, h)
    cv2.rectangle(image, (x, y), (x + w, y + h), (0,255,0), 2)
cv2_imshow(image)
cv2.waitKey(0)
plt.show()

image = cv2.imread('/content/people2.jpg')
image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
detections = face_detector.detectMultiScale(image_gray, scaleFactor = 1.2,
                                            minNeighbors=7,minSize=(20,20), maxSize=(100,100))
display (detections)
for (x, y, w, h) in detections:
    print(w, h)
    cv2.rectangle(image, (x, y), (x + w, y + h), (0,255,0), 2)
cv2_imshow(image)
cv2.waitKey(0)
plt.show()

eye_detector= cv2.CascadeClassifier('/content/haarcascade_eye.xml')

display (eye_detector)

image = cv2.imread('/content/people1.jpg')
display (image.shape)

image = cv2.resize(image, (1600,1000)) # Resize image
print(image.shape)
face_detections = face_detector.detectMultiScale(image, scaleFactor = 1.3, minSize = (30,30))
for (x, y, w, h) in face_detections:
  cv2.rectangle(image, (x, y), (x + w, y + h), (0,255,0), 2)

eye_detections = eye_detector.detectMultiScale(image, scaleFactor = 1.1, minNeighbors=10, maxSize=(60,60))

for (x, y, w, h) in eye_detections:
  print(w, h)
  cv2.rectangle(image, (x, y), (x + w, y + h), (0,0,255), 2)
cv2_imshow(image)
cv2.waitKey(0)
plt.show()

car_detector = cv2.CascadeClassifier('/content/cars.xml')

display (car_detector)

image = cv2.imread('/content/car.jpg')
display (image.shape)
cv2_imshow(image)
cv2.waitKey(0)
plt.show()

image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
detections = car_detector.detectMultiScale(image_gray, scaleFactor = 1.03, minNeighbors=8)
for (x, y, w, h) in detections:
    cv2.rectangle(image, (x, y), (x + w, y + h), (0,255,0), 2)
cv2_imshow(image)
cv2.waitKey(0)
plt.show()

clock_detector = cv2.CascadeClassifier('/clocks.xml')
display (clock_detector)

image = cv2.imread('/content/clock.jpg')
display (image.shape)
cv2_imshow(image)
cv2.waitKey(0)
plt.show()

image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
detections = clock_detector.detectMultiScale(image_gray, scaleFactor = 1.03, minNeighbors=1)
for (x, y, w, h) in detections:
    cv2.rectangle(image, (x, y), (x + w, y + h), (0,255,0), 2)
cv2_imshow(image)
cv2.waitKey(0)
plt.show()

full_detector  = cv2.CascadeClassifier('/fullbody.xml')
display (full_detector)

image = cv2.imread('/content/people3.jpg')
display (image.shape)
cv2_imshow(image)
cv2.waitKey(0)
plt.show()

image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
detections = full_detector.detectMultiScale(image_gray, scaleFactor = 1.05, minNeighbors=5,minSize = (50,50))
for (x, y, w, h) in detections:
    cv2.rectangle(image, (x, y), (x + w, y + h), (0,255,0), 2)
cv2_imshow(image)
cv2.waitKey(0)
plt.show()

import dlib

image = cv2.imread('/content/people2.jpg')
cv2_imshow(image)
cv2.waitKey(0)

face_detector_hog = dlib.get_frontal_face_detector()
detections = face_detector_hog(image, 1) # 1 â€“ is the scale factor

display (len(detections))
display (detections)

print(detections[0])
print(detections[0].left())
print(detections[0].top())
print(detections[0].right())
print(detections[0].bottom())
cv2.rectangle(image, (detections[0].left(), detections[0].top()), (detections[0].right(), detections[0].bottom()), (0, 255, 255), 2)
cv2_imshow(image)
cv2.waitKey(0)

for face in detections:
  l, t, r, b = face.left(), face.top(), face.right(), face.bottom()
  cv2.rectangle(image, (l, t), (r, b), (0, 255, 255), 2)
cv2_imshow(image)
cv2.waitKey(0)

image = cv2.imread('/content/people2.jpg')
cv2_imshow(image)
cv2.waitKey(0)

cnn_detector = dlib.cnn_face_detection_model_v1('C:\\Preethi\\Course Content\\Computer Vision\\Weights\\mmod_human_face_detector.dat')
cnn_detector

detections = cnn_detector(image, 1)
for face in detections:
  l, t, r, b, c = face.rect.left(), face.rect.top(), face.rect.right(), face.rect.bottom(), face.confidence
  print(c)
  cv2.rectangle(image, (l, t), (r, b), (255, 255, 0), 2)
cv2_imshow(image)
cv2.waitKey(0)

image = cv2.imread('/content/people3.jpg')
image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
haarcascade_detector = cv2.CascadeClassifier('/content/haarcascade_frontalface_default.xml')
detections = haarcascade_detector.detectMultiScale(image_gray, scaleFactor = 1.001, minNeighbors=5, minSize = (5,5))
for (x, y, w, h) in detections:
  cv2.rectangle(image, (x, y), (x + w, y + h), (0,255,0), 2)
cv2_imshow(image)
cv2.waitKey(0)

image = cv2.imread('/content/people3.jpg')
face_detector_hog = dlib.get_frontal_face_detector()
detections = face_detector_hog(image, 4)
for face in detections:
    l, t, r, b = (face.left(), face.top(), face.right(), face.bottom())
    cv2.rectangle(image, (l, t), (r, b), (0, 255, 255), 2)
cv2_imshow(image)
cv2.waitKey(0)

